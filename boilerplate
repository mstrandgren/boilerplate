#!/bin/bash

BOILERPLATE_REPO="git@github.com:mstrandgren/boilerplate.git"


RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'

create_project() {
	check_environment || exit 1

	working_dir=$(pwd -P)
	project_dir="$working_dir/$project_name"

	printf "Setting up project ${CYAN}${project_name}${NC} in ${CYAN}$project_dir${NC}...\n"

	mkdir $project_dir || fatal "$project_dir already exists"

	get_boilerplate || rollback
	install_dependencies || rollback

	create_local_repo

	if [ $remote_repo -eq 1 ]; then
		create_remote_repo
	fi

	if [ $sublime_project -eq 1 ]; then
		create_sublime_project
	fi

	printf "\n${GREEN} -------- ALL DONE! -------- ${NC}\n"
	if [ $backend -eq 1]; then
		printf "${CYAN}To run backend, do:${NC}\n\t$ coffee $project_name/app.coffee\n"
	elif [ $frontend -eq 1]; then
		printf "${CYAN}To run frontend, do:${NC}\n\t$ cd $project_name && grunt serve\n"
	else
		printf "${CYAN}To run backend, do:${NC}\n\t$ coffee $project_name/backend/app.coffee\n"
		printf "${CYAN}To run frontend, do:${NC}\n\t$ cd $project_name/frontend && grunt serve\n"
	fi
}

fatal() {
	printf "${RED}ERROR: $1${NC}\n\n"
	exit 1
}

rollback() {
	printf "\n${RED}Deleting $project_dir...${NC}\n"
	rm -Rf $project_dir
	printf "\n${RED}Rollback complete${NC}\n\n"
	exit 1
}

check_environment() {
	local status=0
	if [ -z "$(which grunt)" ]; then
		printf "${RED}ERROR: Please install global grunt:${NC}\n"
		printf "\t$ sudo npm install -g grunt-cli\n"
		status=1
	fi

	if [ -z "$(which coffee)" ]; then
		printf "${RED}ERROR: Please install global coffeescript:${NC}\n"
		echo "\t$ sudo npm install -g coffee-script"
		status=1
	fi

	if [ $remote_repo -eq 0 ]; then
		return $status
	fi

	if [ -z "$BOILERPLATE_BBUSER" -o -z "$BOILERPLATE_BBKEY" ]; then
		while [ -z "$BOILERPLATE_BBUSER" ]; do
			printf "Bitbucket username: "
			read BOILERPLATE_BBUSER
		done

		while [ -z "$BOILERPLATE_BBKEY" ]; do
			printf "Bitbucket api key: "
			read BOILERPLATE_BBKEY
		done
		profile_file="$HOME/.bash_profile"
		echo "

# Bitbucket credentials for boilerplate script
export BOILERPLATE_BBUSER=$BOILERPLATE_BBUSER
export BOILERPLATE_BBKEY=$BOILERPLATE_BBKEY" >> $profile_file

		printf "\nTo avoid having to input these variables next time do\n\n"
		printf "\t$ source ~/.bash_profile\n\n"

		status=0
	fi

	return $status
}

get_boilerplate() {
	cd $project_dir
	git clone --depth 1 $BOILERPLATE_REPO || return 1

	if [ $branch != "master" ]; then
		printf "Checking out branch $branch...\n"
		git checkout $branch || return 1
	fi

	cp boilerplate/.gitignore .

	if [ $license -eq 1 ]; then
		cp boilerplate/LICENSE .
	fi

	if [ $frontend -eq 1 ]; then
		cp -Rf boilerplate/frontend/* .
		frontend_dir="$project_dir"
	elif [ $backend -eq 1 ]; then
		cp -Rf boilerplate/backend/* .
		backend_dir="$project_dir"
	else
		cp -Rf boilerplate/backend .
		cp -Rf boilerplate/frontend .

		frontend_dir="$project_dir/frontend"
		backend_dir="$project_dir/backend"
	fi

	rm -Rf boilerplate
	return 0
}

install_dependencies() {
	if [ -n "$frontend_dir" ]; then
		cd $frontend_dir
		npm install || return 1
		grunt bower || return 1
		grunt build || return 1
	fi

	if [ -n "$backend_dir" ]; then
		cd $backend_dir
		npm install || return 1
	fi

	return 0
}

create_local_repo() {
	cd $project_dir
	git init
	git add -A
	git commit -am "First commit"
}

create_remote_repo() {
	curl_result=`curl -u $BOILERPLATE_BBUSER:$BOILERPLATE_BBKEY https://bitbucket.org/api/1.0/repositories/ --data "name=$project_name;is_private=true"`

	if [ $(echo "$curl_result" | grep -ic resource_uri) -ne 0 ]; then
		repo_url=git@bitbucket.org:$BOILERPLATE_BBUSER/$project_name.git
		printf "\n${GREEN}OK: ${NC}Created remote repo at ${CYAN}${repo_url}${NC}\n\n"

		cd $project_dir
		git remote add origin $repo_url
		git push -u origin --all
		return 0
	else
		printf "${RED}ERROR: Failed to create remote repo: ${NC}\n${curl_result}\n"
		return 1
	fi
}

create_sublime_project() {
	sublime_project="$working_dir/$project_name.sublime-project"
	result=$(echo '{"folders":[{"path": "$project_name","folder_exclude_patterns": ["build", "node_modules", "bower_components"]}]}' > "$sublime-project")
	if [ $result = 0 ]; then
		printf "${GREEN}OK: ${NC}Created sublime project at ${CYAN}$sublime_project${NC}\n"
	else
		printf "${RED}ERROR: Could not create sublime project"
	fi
	return 0
}

show_help() {

echo "
Usage: boilerplate [opts] [branch] project_name

-c		Client app only
-s		Server app only
-r		Create remote repo (will prompt for bitbucket credentials the first time)
-p		Create sublime project
-b <branch>	Use a specific branch, other than master
-l		Give the project an MIT license (you need to change the name in the license manually)
-h		Show this help message
"

}

frontend=0
backend=0
remote_repo=0
sublime_project=0
license=0
branch="master"

while	getopts "hcsrplb:" opt; do
	case "$opt" in
		h) show_help; exit 0;;
		c) frontend=1;;
		s) backend=1;;
		r) remote_repo=1;;
		p) sublime_project=1;;
		l) license=1;;
		b) branch=$OPTARG;;
		\?) show_help; exit 1;;
	esac
done

shift "$((OPTIND-1))"

project_name=$1

if [ -z "$project_name" ]; then
	echo "ERROR: A project name is required"
	show_help
	exit 1
fi

if [[ $frontend -eq 1 && $backend -eq 1 ]]; then
	frontend=0
	backend=0
fi

create_project
